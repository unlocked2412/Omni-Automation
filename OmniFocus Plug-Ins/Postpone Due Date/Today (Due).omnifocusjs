/*{
	"type": "action",
	"author": "unlocked2412",
	"version": "0.1",
	"description": "A single-file OmniFocus plug-in.",
}*/
// Twitter: @unlocked2412
(() =>
    Object.assign(
        new PlugIn.Action(selection => {
            // OMNI JS CODE ---------------------------------------
            const omniJSContext = () => {
                // main :: IO ()
                const main = () => {
                    const
                        defaultStartTime = settings
                        .objectForKey('DefaultDueTime'),
                        ts = ['projects', 'tasks'].flatMap(
                            k => Array.from(selection[k])
                        ),
                        today = addDays(0)(
                            setTime(
                                ...splitOn(":")(defaultStartTime)
                            )(
                                new Date()
                            )
                        );

                    return ts.map(updatedueDate(today))
                };

                // updatedueDate :: Date -> OFTask -> IO OFTask
                const updatedueDate = dte => task => {
                    return (
                        task.dueDate = dte,
                        task
                    )
                }

                // FUNCTIONS --
                // https://github.com/RobTrew/prelude-jxa
                // JS Basics ---------------------------------------------------
                // addDays :: Int -> Date -> Date
                const addDays = n => dte => {
                    const dte2 = new Date(dte);
                    return (
                        dte2.setDate(n + dte.getDate()),
                        dte2
                    );
                };

                // setTime :: (Int, Int, Int) -> Date -> Date
                const setTime = (h, m, s) => dte => {
                    const dte2 = new Date(dte);
                    return (
                        dte2.setHours(h, m, s, 0),
                        dte2
                    );
                };

                // addHours :: Int -> Date -> Date
                const addHours = n => dte => {
                    const dte2 = new Date(dte);
                    return (
                        dte2.setHours(n + dte.getHours()),
                        dte2
                    );
                };

                // addWeeks :: Int -> Date -> Date
                const addWeeks = n => addDays(7 * n);

                // addMonths :: Int -> Date -> Date
                const addMonths = n => dte => {
                    const dte2 = new Date(dte);
                    return (
                        dte2.setMonth(n + dte.getMonth()),
                        dte2
                    );
                };

                // JS Prelude --------------------------------------------------
                // Tuple (,) :: a -> b -> (a, b)
                const Tuple = a =>
                    b => ({
                        type: "Tuple",
                        "0": a,
                        "1": b,
                        length: 2
                    });

                // add (+) :: Num a => a -> a -> a
                const add = a =>
                    // Curried addition.
                    b => a + b;

                // all :: (a -> Bool) -> [a] -> Bool
                const all = p =>
                    // True if p(x) holds for every x in xs.
                    xs => [...xs].every(p);

                // any :: (a -> Bool) -> [a] -> Bool
                const any = p =>
                    // True if p(x) holds for at least
                    // one item in xs.
                    xs => [...xs].some(p);


                // concat :: [[a]] -> [a]
                // concat :: [String] -> String
                const concat = xs =>
                    0 < xs.length ? (
                        (
                            xs.every(x => "string" === typeof x) ? (
                                ""
                            ) : []
                        ).concat(...xs)
                    ) : xs;

                // eq (==) :: Eq a => a -> a -> Bool
                const eq1 = a =>
                    // True when a and b are equivalent in the terms
                    // defined below for their shared data type.
                    b => {
                        const t = typeName(a);

                        return t !== typeName(b) ? (
                            false
                        ) : "Dict" !== t ? (
                            "Date" !== t ? (
                                "function" !== t ? (
                                    a === b
                                ) : a.toString() === b.toString()
                            ) : 0 === (a - b) // Date equality
                        ) : (() => {
                            const kvs = Object.entries(a);

                            return kvs.length !== Object.keys(b).length ? (
                                false
                            ) : kvs.every(([k, v]) => eq(v)(b[k]));
                        })();
                    };

                // findIndices :: (a -> Bool) -> [a] -> [Int]
                // findIndices :: (String -> Bool) -> String -> [Int]
                const findIndices = p =>
                    xs => {
                        const ys = [...xs];

                        return ys.flatMap(
                            (y, i) => p(y, i, ys) ? (
                                [i]
                            ) : []
                        );
                    };

                // fst :: (a, b) -> a
                const fst = tpl =>
                    // First member of a pair.
                    tpl[0];

                // keys :: Dict -> [String]
                const keys = Object.keys;

                // length :: [a] -> Int
                const length = xs =>
                    // Returns Infinity over objects without finite
                    // length. This enables zip and zipWith to choose
                    // the shorter argument when one is non-finite,
                    // like cycle, repeat etc
                    "GeneratorFunction" !== xs.constructor
                    .constructor.name ? (
                        xs.length
                    ) : Infinity;

                // map :: (a -> b) -> [a] -> [b]
                const map = f =>
                    // The list obtained by applying f
                    // to each element of xs.
                    // (The image of xs under f).
                    xs => [...xs].map(f);

                // matching :: [a] -> (a -> Int -> [a] -> Bool)
                const matching = pat => {
                    // A sequence-matching function for findIndices etc
                    // findIndices(matching([2, 3]), [1, 2, 3, 1, 2, 3])
                    // -> [1, 4]
                    const
                        lng = pat.length,
                        bln = 0 < lng,
                        h = bln ? pat[0] : undefined;

                    return x => i => src =>
                        bln && h === x && eq(pat)(
                            src.slice(i, lng + i)
                        );
                };

                // snd :: (a, b) -> b
                const snd = tpl =>
                    // Second member of a pair.
                    tpl[1];

                // splitOn :: [a] -> [a] -> [[a]]
                // splitOn :: String -> String -> [String]
                const splitOn = pat => src =>
                    // A list of the strings delimited by
                    // instances of a given pattern in s.
                    ("string" === typeof src) ? (
                        src.split(pat)
                    ) : (() => {
                        const
                            lng = pat.length,
                            tpl = findIndices(matching(pat))(src).reduce(
                                (a, i) => Tuple(
                                    fst(a).concat([src.slice(snd(a), i)])
                                )(lng + i),
                                Tuple([])(0)
                            );

                        return fst(tpl).concat([src.slice(snd(tpl))]);
                    })();

                // typeName :: a -> String
                const typeName = v => {
                    const t = typeof v;

                    return null !== v ? (
                        "object" === t ? (
                            Array.isArray(v) ? (
                                "List"
                            ) : "Date" === v.constructor.name ? (
                                "Date"
                            ) : (() => {
                                const ct = v.type;

                                return Boolean(ct) ? (
                                    (/Tuple\d+/u).test(ct) ? (
                                        "TupleN"
                                    ) : ct
                                ) : "Dict";
                            })()
                        ) : {
                            "boolean": "Bool",
                            "date": "Date",
                            "number": "Num",
                            "string": "String",
                            "function": "(a -> b)"
                        } [t] || "Bottom"
                    ) : "Bottom";
                };

                return main()
            };

            return omniJSContext()
        }), {
            validate: selection => ['projects', 'tasks'].flatMap(
                k => Array.from(selection[k])
            ).length > 0
        })
)();