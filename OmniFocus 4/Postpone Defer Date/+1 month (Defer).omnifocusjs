/*{
	"type": "action",
	"author": "unlocked2412",
	"version": "0.1",
	"description": "A single-file plug-in.",
}*/
// Twitter: @unlocked2412
(() =>
    Object.assign(
        new PlugIn.Action(selection => {
            // OMNI JS CODE ---------------------------------------
            const omniJSContext = () => {
                // main :: IO ()
                const main = () => {
                    const
                        defaultStartTime = settings
                        .objectForKey('DefaultStartTime'),
                        ts = ['projects', 'tasks'].flatMap(
                            k => Array.from(selection[k])
                        ),
                        tomorrow = addMonths(1)(
                            setTime(
                                splitOn(":")(defaultStartTime)
                            )(
                                new Date()
                            )
                        ),
                        p = (
                            null === ts[0].deferDate ||
                            any(x => !eqDateTimeS(ts[0].deferDate)(x.deferDate))(ts)
                        );

                    return p ? (
                        ts.map(updateDeferDate(tomorrow))
                    ) : ts.map(task =>
                        updateDeferDate(addMonths(1)(task.deferDate))(
                            task
                        )
                    )
                };

                // updateDeferDate :: Date -> OFTask -> IO OFTask
                const updateDeferDate = dte => task => {
                    return (
                        task.deferDate = dte,
                        task
                    )
                }


                // FUNCTIONS --
                // https://github.com/RobTrew/prelude-jxa
                // JS Basics ---------------------------------------------------
                // addHours :: Int -> Date -> Date
                const addHours = n => dte => {
                    const dte2 = new Date(dte);
                    return (
                        dte2.setHours(n + dte.getHours()),
                        dte2
                    );
                };

                // addDays :: Int -> Date -> Date
                const addDays = n => dte => {
                    const dte2 = new Date(dte);
                    return (
                        dte2.setDate(n + dte.getDate()),
                        dte2
                    );
                };

                // addWeeks :: Int -> Date -> Date
                const addWeeks = n => addDays(7 * n);

                // addMonths :: Int -> Date -> Date
                const addMonths = n => dte => {
                    const dte2 = new Date(dte);
                    return (
                        dte2.setMonth(n + dte.getMonth()),
                        dte2
                    );
                };

                // eqDateTimeS :: Int -> Date -> Date -> Bool
                const eqDateTimeS = n =>
                    // Equivalence of two JS Date values
                    // at a granularity of n seconds.
                    // e.g.
                    //  Same second: eqDateTime(1)(a)(b)
                    //  Same minute: eqDateTime(60)(a)(b)
                    //    Same hour: eqDateTime(3600)(a)(b)
                    on(a => b => a === b)(
                        flip(div)(1E3 * n)
                    );

                // setTime :: [Int] -> Date -> Date
                const setTime = xs => dte => {
                    const dte2 = new Date(dte);
                    return (
                        dte2.setHours(0, 0, 0, 0),
                        dte2.setHours(...xs),
                        dte2
                    );
                };

                // JS Prelude --------------------------------------------------
                // Ratio :: Integral a => a -> a -> Ratio a
                const Ratio = a => b => {
                    const go = (x, y) =>
                        0 !== y ? (() => {
                            const d = gcd(x)(y);

                            return {
                                type: "Ratio",
                                // numerator
                                "n": Math.trunc(x / d),
                                // denominator
                                "d": Math.trunc(y / d)
                            };
                        })() : undefined;

                    return go(a * signum(b), abs(b));
                };

                // Tuple (,) :: a -> b -> (a, b)
                const Tuple = a =>
                    b => ({
                        type: "Tuple",
                        "0": a,
                        "1": b,
                        length: 2
                    });

                // abs :: Num -> Num
                const abs =
                    // Absolute value of a given number - without the sign.
                    x => 0 > x ? (
                        -x
                    ) : x;

                // any :: (a -> Bool) -> [a] -> Bool
                const any = p =>
                    // True if p(x) holds for at least
                    // one item in xs.
                    xs => [...xs].some(p);

                // concat :: [[a]] -> [a]
                // concat :: [String] -> String
                const concat = xs =>
                    0 < xs.length ? (
                        (
                            xs.every(x => "string" === typeof x) ? (
                                ""
                            ) : []
                        ).concat(...xs)
                    ) : xs;

                // div :: Int -> Int -> Int
                const div = x =>
                    y => Math.floor(x / y);

                // eq (==) :: Eq a => a -> a -> Bool
                const eq = a =>
                    // True when a and b are equivalent in the terms
                    // defined below for their shared data type.
                    b => {
                        const t = typeof a;

                        return t !== typeof b ? (
                            false
                        ) : "object" !== t ? (
                            "function" !== t ? (
                                a === b
                            ) : a.toString() === b.toString()
                        ) : (() => {
                            const kvs = Object.entries(a);

                            return kvs.length !== Object.keys(b).length ? (
                                false
                            ) : kvs.every(([k, v]) => eq(v)(b[k]));
                        })();
                    };

                // findIndices :: (a -> Bool) -> [a] -> [Int]
                // findIndices :: (String -> Bool) -> String -> [Int]
                const findIndices = p =>
                    xs => {
                        const ys = [...xs];

                        return ys.flatMap(
                            (y, i) => p(y, i, ys) ? (
                                [i]
                            ) : []
                        );
                    };

                // flip :: (a -> b -> c) -> b -> a -> c
                const flip = op =>
                    // The binary function op with
                    // its arguments reversed.
                    1 < op.length ? (
                        (a, b) => op(b, a)
                    ) : (x => y => op(y)(x));

                // floor :: Num -> Int
                const floor = x => {
                    const
                        nr = (
                            "Ratio" !== x.type ? (
                                properFraction
                            ) : properFracRatio
                        )(x),
                        n = nr[0];

                    return 0 > nr[1] ? n - 1 : n;
                };

                // fst :: (a, b) -> a
                const fst = tpl =>
                    // First member of a pair.
                    tpl[0];

                // gcd :: Integral a => a -> a -> a
                const gcd = x =>
                    y => {
                        const zero = x.constructor(0);
                        const go = (a, b) =>
                            zero === b ? (
                                a
                            ) : go(b, a % b);

                        return go(abs(x), abs(y));
                    };

                // keys :: Dict -> [String]
                const keys = Object.keys;

                // length :: [a] -> Int
                const length = xs =>
                    // Returns Infinity over objects without finite
                    // length. This enables zip and zipWith to choose
                    // the shorter argument when one is non-finite,
                    // like cycle, repeat etc
                    "GeneratorFunction" !== xs.constructor
                    .constructor.name ? (
                        xs.length
                    ) : Infinity;

                // map :: (a -> b) -> [a] -> [b]
                const map = f =>
                    // The list obtained by applying f
                    // to each element of xs.
                    // (The image of xs under f).
                    xs => [...xs].map(f);

                // matching :: [a] -> (a -> Int -> [a] -> Bool)
                const matching = pat => {
                    // A sequence-matching function for findIndices etc
                    // findIndices(matching([2, 3]), [1, 2, 3, 1, 2, 3])
                    // -> [1, 4]
                    const
                        lng = pat.length,
                        bln = 0 < lng,
                        h = bln ? pat[0] : undefined;

                    return x => i => src =>
                        bln && h === x && eq(pat)(
                            src.slice(i, lng + i)
                        );
                };

                // on :: (b -> b -> c) -> (a -> b) -> a -> a -> c
                const on = f =>
                    // e.g. groupBy(on(eq)(length))
                    g => a => b => f(g(a))(g(b));

                // properFracRatio :: Ratio -> (Int, Ratio)
                const properFracRatio = nd => {
                    const [q, r] = Array.from(quotRem(nd.n, nd.d));

                    return Tuple(q, ratio(r, nd.d));
                };

                // properFraction :: Real -> (Int, Real)
                const properFraction = n => {
                    const i = Math.floor(n) + (n < 0 ? 1 : 0);

                    return Tuple(i)(n - i);
                };

                // quotRem :: Integral a => a -> a -> (a, a)
                const quotRem = m =>
                    // The quotient, tupled with the remainder.
                    n => Tuple(
                        Math.trunc(m / n)
                    )(
                        m % n
                    );

                // signum :: Num -> Num
                const signum = n =>
                    // | Sign of a number.
                    n.constructor(
                        0 > n ? (
                            -1
                        ) : (
                            0 < n ? 1 : 0
                        )
                    );

                // snd :: (a, b) -> b
                const snd = tpl =>
                    // Second member of a pair.
                    tpl[1];

                // splitOn :: [a] -> [a] -> [[a]]
                // splitOn :: String -> String -> [String]
                const splitOn = pat => src =>
                    // A list of the strings delimited by
                    // instances of a given pattern in s.
                    ("string" === typeof src) ? (
                        src.split(pat)
                    ) : (() => {
                        const
                            lng = pat.length,
                            tpl = findIndices(matching(pat))(src).reduce(
                                (a, i) => Tuple(
                                    fst(a).concat([src.slice(snd(a), i)])
                                )(lng + i),
                                Tuple([])(0)
                            );

                        return fst(tpl).concat([src.slice(snd(tpl))]);
                    })();

                return main()
            };

            return omniJSContext()
        }), {
            validate: selection => ["tasks", "projects"].some(
                k => selection[k].length > 0
            )
        })
)();